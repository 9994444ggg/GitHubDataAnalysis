# -*- coding: utf-8 -*-
"""
Created on Fri Jan 31 15:11:32 2020

@author: pmedappa

Get month info of the collaborators and external contributors
"""

import openpyxl
import pandas as pd
import numpy as np
import ast

COL_MC_XLSX = r"C:\Users\pmedappa\Dropbox\Data\092019 CommitInfo\Organization_Specific\Classified\int_org_col_classified_google_commit_2_test.xlsx"
NEW_XLSX = r"C:\Users\pmedappa\Dropbox\Data\092019 CommitInfo\Organization_Specific\Classified\merge_int_org_col_classified_google_commit_2_test.xlsx"
DT_ERROR_LOG = r"C:\Users\pmedappa\Dropbox\Data\092019 CommitInfo\Organization_Specific\Classified\DT_ERROR_LOG_UserInfo_Ext.xlsx"

MAX_ROWS_PERWRITE = 2000

DF_REPO = pd.DataFrame()
DF_COUNT = 0
ORG_NAME = list()

LOG_CSV = r'C:\Users\pmedappa\Dropbox\Data\092019 CommitInfo\Contributors_monthwise\UserSpon_log.csv'

def appendrowindf(user_xl, row, df_flag = 0):
    """This code appends a row into the dataframe and returns the updated dataframe"""
    global DF_REPO 
    global DF_COUNT
    
    
    # note there is an issue when shape is used for series and df. 
    if df_flag == 0:
        DF_REPO= DF_REPO.append(row, ignore_index = True)
        DF_COUNT = DF_COUNT + 1 # use row.shape[0] for dataframe
    else:
        # row = row.reset_index(drop=True)
        DF_REPO= DF_REPO.append(row, ignore_index = True)
        DF_COUNT = DF_COUNT + row.shape[0]
        
    if DF_COUNT >= MAX_ROWS_PERWRITE :
        df = pd.read_excel(user_xl,header= 0)
        df= df.append(DF_REPO, ignore_index = True)
        df.to_excel(user_xl, index = False) 
        DF_COUNT = 0
        DF_REPO = pd.DataFrame()

def getnetcolab(df_repom):
    """ Find net colab """
    df_repom = df_repom.sort_values(by='contributor_start_yearmonth', ascending=True)
    df_repom['rank_yearmonth'] = df_repom['contributor_start_yearmonth'].rank(method='min')
    
    #get colab and contributors
    df_repom['Collaborator']= df_repom['contributor_type'].apply( lambda x: 1 if x == 'Collaborator' else 0)
    df_repom['Contributor']= df_repom['contributor_type'].apply( lambda x: 1 if x == 'Contributor' else 0)
    
    #get internal colab and contributors
    df_repom['Internal_Acc']= df_repom['internal_contributor'].apply( lambda x: 1 if x > 0 and x < 4 else 0)
    df_repom['Internal_All']= df_repom['internal_contributor'].apply( lambda x: 1 if x > 0 else 0)
    df_repom['Internal_Acc_Colab']= df_repom.apply( lambda x: 1 if x['internal_contributor'] > 0 and x['internal_contributor'] < 4  and x['contributor_type'] == 'Collaborator' else 0, axis = 1)
    df_repom['Internal_All_Colab']= df_repom.apply( lambda x: 1 if x['internal_contributor'] > 0 and  x['contributor_type'] == 'Collaborator' else 0, axis = 1)
    df_repom['Internal_Acc_Cont']= df_repom.apply( lambda x: 1 if x['internal_contributor'] > 0 and x['internal_contributor'] < 4  and x['contributor_type'] == 'Contributor' else 0, axis = 1)
    df_repom['Internal_All_Cont']= df_repom.apply( lambda x: 1 if x['internal_contributor'] > 0 and  x['contributor_type'] == 'Contributor' else 0, axis = 1)
    
     
    return df_repom    
    
    
def monthwise(contri):
    #get month information for each commit
    # contri.columns = ['NAN', 'C_TYPE','C_NAME','CONTRIBUTIONS','PULLS','S_DATE','E_DATE'] #,'COMPANY','ORG_NAME','ORG_LOGIN','ORGANIZATIONS','EMAIL','LOCATION','ISHIREABLE','EXTERNAL','ALL_ORGS'

    
    
    df2 = pd.DataFrame({'month' : [i for i in range(contri['contributor_start_yearmonth'].astype(int).max()+1)]})
    df2 = df2.set_index('month')
    
    # df_repom = df_repom.assign(net_colab = df_repom['cs_colab'] - df_repom['end_colab'].cumsum().shift(1).fillna(0))
    # df_repom = df_repom.assign(cs_cont= df_repom['start_cont'].cumsum())
    # df_repom = df_repom.assign(net_cont = df_repom['cs_cont'] - df_repom['end_cont'].cumsum().shift(1).fillna(0))    

    
    
    df2 = df2.set_index('month')
    contri['contributor_start_yearmonth'] = contri['contributor_start_yearmonth'].astype(int)
    print(contri.groupby('contributor_start_yearmonth')['Collaborator'].sum().to_frame('start_colab'))
    df2 = pd.concat([df2,contri.groupby('contributor_start_yearmonth')['Collaborator'].sum().to_frame('start_colab')], axis=1)
    print(df2)
    """
    df2 = pd.concat([df2, contri.groupby('e_month')['Collaborator'].sum().to_frame('end_colab')], axis=1)
    df2 = pd.concat([df2,contri.groupby('s_month')['Contributor'].sum().to_frame('start_cont')], axis=1)
    df2 = pd.concat([df2, contri.groupby('e_month')['Contributor'].sum().to_frame('end_cont')], axis=1)
    
    df2 = pd.concat([df2,contri.groupby('s_month')['Internal_All'].sum().to_frame('start_int_all')], axis=1)
    df2 = pd.concat([df2, contri.groupby('e_month')['Internal_All'].sum().to_frame('end_int_all')], axis=1)    
    df2 = pd.concat([df2,contri.groupby('s_month')['Internal_Acc'].sum().to_frame('start_int_acc')], axis=1)
    df2 = pd.concat([df2, contri.groupby('e_month')['Internal_Acc'].sum().to_frame('end_int_acc')], axis=1)  

    df2 = pd.concat([df2,contri.groupby('s_month')['Internal_All_Colab'].sum().to_frame('start_int_all_colab')], axis=1)
    df2 = pd.concat([df2, contri.groupby('e_month')['Internal_All_Colab'].sum().to_frame('end_int_all_colab')], axis=1)        
    df2 = pd.concat([df2,contri.groupby('s_month')['Internal_All_Cont'].sum().to_frame('start_int_all_cont')], axis=1)
    df2 = pd.concat([df2, contri.groupby('e_month')['Internal_All_Cont'].sum().to_frame('end_int_all_cont')], axis=1)        

    df2 = pd.concat([df2,contri.groupby('s_month')['Internal_Acc_Colab'].sum().to_frame('start_int_acc_colab')], axis=1)
    df2 = pd.concat([df2, contri.groupby('e_month')['Internal_Acc_Colab'].sum().to_frame('end_int_acc_colab')], axis=1)        
    df2 = pd.concat([df2,contri.groupby('s_month')['Internal_Acc_Cont'].sum().to_frame('start_int_acc_cont')], axis=1)
    df2 = pd.concat([df2, contri.groupby('e_month')['Internal_Acc_Cont'].sum().to_frame('end_int_acc_cont')], axis=1) 

    df2 = df2.reset_index()
    df2.rename(columns={"index": "month"}, inplace = True)

    df2 = df2.fillna(0)
    """

    return df2


def main():
    """Get data from the training sample CSV and perform various cleaning and data preprocessing"""
    global DF_REPO 
    global DF_COUNT
    pd.options.display.max_rows = 10
    pd.options.display.float_format = '{:.3f}'.format
    
    
    cont_df = pd.read_excel(COL_MC_XLSX ,header= 0)
    
    temp_df = pd.DataFrame()
    temp_df.to_excel(NEW_XLSX, index = False) 
    for i, row in cont_df.iterrows():
        if  pd.notnull(row[0]):
            print("Repo: ",row[0]," Owner: ",row[2]," Type: ",row[3])
            if  len(temp_df) != 0:
                m_temp_df = getnetcolab(temp_df)
                print(m_temp_df)
                m_temp_df2= monthwise(m_temp_df)
                # appendrowindf(NEW_XLSX, temp_df, df_flag = 1)
                appendrowindf(NEW_XLSX, m_temp_df, df_flag = 1)
            

            appendrowindf(NEW_XLSX, row, df_flag = 0)
            temp_df = pd.DataFrame()
        else:           
            temp_df = temp_df.append(row, ignore_index = True)
    
    if  len(temp_df) != 0:
        m_temp_df = getnetcolab(temp_df)
        # m_temp_df= monthwise(temp_df)
        m_temp_df2= monthwise(m_temp_df)
        appendrowindf(NEW_XLSX, m_temp_df, df_flag = 1)
    df = pd.read_excel(NEW_XLSX,header= 0)
    df= df.append(DF_REPO, ignore_index = True)
    df.to_excel(NEW_XLSX, index = False) 
    DF_COUNT = 0
    DF_REPO = pd.DataFrame()    


if __name__ == '__main__':
  main()
  